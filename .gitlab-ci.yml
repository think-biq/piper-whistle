# The Docker image that will be used to build your app
image: thinkbiq/ue-plugin-staging:latest

stages:
  - pre-release-test
  - release
  - grace
  - post-release-test
  - finalize

test-functional:
  stage: pre-release-test
  script:
    - make pip-update-pip pip-install-dev pip-install-runtime
    - make run-tests
  rules:
    # This ensures that only pushes to the default branch are considered.
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
    # This ensures that only pushes to the staging / testing branch
    - if: $CI_COMMIT_REF_NAME == "staging"
      when: manual
      allow_failure: true

test-release-pypi-test:
  stage: post-release-test
  script:
    - python3 -m pip install -U pip
    # Need to setup test as well as live repository, to properly resolve
    # all piper-whistle dependencies. Force the staged version, as to skip
    # the live version, since live repo seems to have precedence.
    - python3 -m pip install --trusted-host test.pypi.org --trusted-host test-files.pythonhosted.org --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ piper_whistle==$(python3 -m src.piper_whistle.version)
    - piper_whistle -h
    - echo "Setting up search index ..."
    - piper_whistle -vR
    - echo "Checking if HU is supported ..."
    - if [ "hu_HU" = "$(piper_whistle guess hung)" ]; then echo "Found hungarian language support"; else exit 13; fi
    - echo "Checking if model at index 1 is available ..."
    - piper_whistle list -U -l hu_HU -i 1
    - echo "Installing model 1 ..."
    - piper_whistle install hu_HU 1
    - echo "Fetching path of model 1 ..."
    - piper_whistle path $(piper_whistle list -S -l hu_HU -i 1 | awk '{ print $1 }')
  rules:
    # This ensures that only pushes to the default branch are considered.
    - if: $CI_COMMIT_REF_NAME == "staging"
      allow_failure: true

release-pypi-test:
  stage: release
  variables:
    RELEASE_DIR: build/release
  script:
    - make pip-update-all
    - make readme-build
    - make release
    - twine upload -r testpypi --config-file "${PYPI_CONFIG_FILE}" --skip-existing ${RELEASE_DIR}/*
  rules:
    # This ensures that only pushes to the staging / testing branch
    - if: $CI_COMMIT_REF_NAME == "staging"
      allow_failure: true
    # or main branch are considered.
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true

delay-before-checking-pypi-test:
  # Helps give pypi index time to refresh cache.
  stage: grace
  variables:
    DELAY_IN_SECONDS: 13
  script:
    - echo "Sleeping for ${DELAY_IN_SECONDS} seconds ..."
    - sleep ${DELAY_IN_SECONDS}
    - echo "Done."
  rules:
    # This ensures that only pushes to the staging / testing branch
    - if: $CI_COMMIT_REF_NAME == "staging"
      allow_failure: true

release-pypi:
  stage: release
  script:
    - make pip-update-all
    - make readme-build
    - make release
    - twine upload --config-file ${PYPI_LIVE_CONFIG_FILE} build/release/*
  rules:
    # This ensures that only pushes to the release branch trigger sync.
    - if: $CI_COMMIT_REF_NAME == "release"
      allow_failure: true

pages:
  stage: finalize
  script:
    - echo "Install requirements ..."
    - make pip-update-all
    - echo "Building documentation ..."
    - make docs-build
    - echo "Exposing as public ..."
    - mv docs/published public
    - echo "Result:"
    - ls -lav public
    - echo "Hosting ..."
  artifacts:
    paths:
      # The folder that contains the files to be exposed at the Page URL
      - public
  rules:
    # This ensures that only pushes to the release branch trigger sync.
    - if: $CI_COMMIT_REF_NAME == "release"
      allow_failure: true
    # or main branch are considered.
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true

sync:
  stage: finalize
  script:
    - apt-get update -y
    - apt-get install -yqqf openssh-client sshpass --fix-missing
    - eval $(ssh-agent -s)
    - cat "${GITHUB_DEPLOY_KEY_FILE}" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan ${GITHUB_DEPLOY_DOMAIN} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "${GITHUB_USER_EMAIL}"
    - git config --global user.name "${GITHUB_USER_NAME}"
    - git remote rm origin 2> /dev/null
    - git remote add origin ${GITHUB_REPO_LINK}
    - git push --all
    - git push --tags
  rules:
    # This ensures that only pushes to the release branch trigger sync.
    - if: $CI_COMMIT_REF_NAME == "release"
      allow_failure: true
    # or main branch are considered.
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
