# The Docker image that will be used to build your app
image: thinkbiq/ue-plugin-staging:latest

functional-test:
  script:
    - apt update --fix-missing
    - apt install -y python3-pip
    - pip install -U pip
    - pip install -r requirements.dev.txt
    - pip install -r requirements.txt
    - python3 -m unittest src/testing/functional.py
  rules:
    # This ensures that only pushes to the default branch will trigger
    # a pages deploy
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      allow_failure: true

release-pypi-test:
  script:
    - apt update --fix-missing
    - apt install -y python3-pip python3.8-venv
    - pip install -U pip
    - pip install -r requirements.dev.txt
    - pip install -r requirements.txt
    - mkdir -p build/release
    - python3 -m build -s -w -o build/release
    - twine upload --config-file ${PYPI_CONFIG_FILE} -r testpypi build/release/*
  rules:
    # This ensures that only pushes to the default branch will trigger
    # a pages deploy
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true

release-pypi:
  script:
    - apt update --fix-missing
    - apt install -y python3-pip python3.8-venv
    - pip install -U pip
    - pip install -r requirements.dev.txt
    - pip install -r requirements.txt
    - mkdir -p build/release
    - python3 -m build -s -w -o build/release
    - twine upload --config-file ${PYPI_CONFIG_FILE} build/release/*
  rules:
    # This ensures that only pushes to the default branch will trigger
    # a pages deploy
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true

pages:
  script:
    - echo "Building documentation ..."
    - make -C docs
    - echo "Exposing as public ..."
    - mv docs/published public
    - echo "Result:"
    - ls -lav public
    - echo "Hosting ..."
  artifacts:
    paths:
      # The folder that contains the files to be exposed at the Page URL
      - public
  rules:
    # This ensures that only pushes to the default branch will trigger
    # a pages deploy
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true

sync:
  script:
    - apt-get update -y
    - apt-get install -yqqf openssh-client git unzip sshpass rsync --fix-missing
    - 'which ssh-agent || ( apt-get update -y && apt-get install -y openssh-client git )'
    - eval $(ssh-agent -s)
    - cat "${GITHUB_DEPLOY_KEY_FILE}" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan ${GITHUB_DEPLOY_DOMAIN} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "${GITHUB_USER_EMAIL}"
    - git config --global user.name "${GITHUB_USER_NAME}"
    - git remote rm origin 2> /dev/null && echo "origin remove" || echo "no origin"
    - git remote add origin ${GITHUB_REPO_LINK}
    - git push --all
    - git push --tags
  rules:
    # This ensures that only pushes to the default branch will trigger
    # a pages deploy
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
